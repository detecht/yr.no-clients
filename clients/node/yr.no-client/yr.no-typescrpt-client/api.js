"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * Locationforecast
 * Weather forecast for a specified place
 *
 * The version of the OpenAPI document: 2.0
 * Contact: weatherapi-adm@met.no
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MetadataApi = exports.MetadataApiFactory = exports.MetadataApiFp = exports.MetadataApiAxiosParamCreator = exports.StatusFormatGetFormatEnum = exports.MiniFormatGetFormatEnum = exports.CompleteFormatGetFormatEnum = exports.CompactFormatGetFormatEnum = exports.ClassicFormatGetFormatEnum = exports.DataApi = exports.DataApiFactory = exports.DataApiFp = exports.DataApiAxiosParamCreator = exports.PointGeometryTypeEnum = exports.METJSONForecastTypeEnum = void 0;
const axios_1 = require("axios");
// Some imports not used depending on template conditions
// @ts-ignore
const common_1 = require("./common");
// @ts-ignore
const base_1 = require("./base");
exports.METJSONForecastTypeEnum = {
    Feature: 'Feature'
};
exports.PointGeometryTypeEnum = {
    Point: 'Point'
};
/**
 * DataApi - axios parameter creator
 * @export
 */
const DataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {ClassicFormatGetFormatEnum} format format code (file extension)
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classicFormatGet: (lat_1, lon_1, format_1, altitude_1, ...args_1) => __awaiter(this, [lat_1, lon_1, format_1, altitude_1, ...args_1], void 0, function* (lat, lon, format, altitude, options = {}) {
            // verify required parameter 'lat' is not null or undefined
            (0, common_1.assertParamExists)('classicFormatGet', 'lat', lat);
            // verify required parameter 'lon' is not null or undefined
            (0, common_1.assertParamExists)('classicFormatGet', 'lon', lon);
            // verify required parameter 'format' is not null or undefined
            (0, common_1.assertParamExists)('classicFormatGet', 'format', format);
            const localVarPath = `/classic.{format}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (altitude !== undefined) {
                localVarQueryParameter['altitude'] = altitude;
            }
            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }
            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classicGet: (lat_1, lon_1, altitude_1, ...args_1) => __awaiter(this, [lat_1, lon_1, altitude_1, ...args_1], void 0, function* (lat, lon, altitude, options = {}) {
            // verify required parameter 'lat' is not null or undefined
            (0, common_1.assertParamExists)('classicGet', 'lat', lat);
            // verify required parameter 'lon' is not null or undefined
            (0, common_1.assertParamExists)('classicGet', 'lon', lon);
            const localVarPath = `/classic`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (altitude !== undefined) {
                localVarQueryParameter['altitude'] = altitude;
            }
            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }
            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {CompactFormatGetFormatEnum} format format code (file extension)
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compactFormatGet: (lat_1, lon_1, format_1, altitude_1, ...args_1) => __awaiter(this, [lat_1, lon_1, format_1, altitude_1, ...args_1], void 0, function* (lat, lon, format, altitude, options = {}) {
            // verify required parameter 'lat' is not null or undefined
            (0, common_1.assertParamExists)('compactFormatGet', 'lat', lat);
            // verify required parameter 'lon' is not null or undefined
            (0, common_1.assertParamExists)('compactFormatGet', 'lon', lon);
            // verify required parameter 'format' is not null or undefined
            (0, common_1.assertParamExists)('compactFormatGet', 'format', format);
            const localVarPath = `/compact.{format}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (altitude !== undefined) {
                localVarQueryParameter['altitude'] = altitude;
            }
            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }
            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compactGet: (lat_1, lon_1, altitude_1, ...args_1) => __awaiter(this, [lat_1, lon_1, altitude_1, ...args_1], void 0, function* (lat, lon, altitude, options = {}) {
            // verify required parameter 'lat' is not null or undefined
            (0, common_1.assertParamExists)('compactGet', 'lat', lat);
            // verify required parameter 'lon' is not null or undefined
            (0, common_1.assertParamExists)('compactGet', 'lon', lon);
            const localVarPath = `/compact`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (altitude !== undefined) {
                localVarQueryParameter['altitude'] = altitude;
            }
            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }
            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {CompleteFormatGetFormatEnum} format format code (file extension)
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeFormatGet: (lat_1, lon_1, format_1, altitude_1, ...args_1) => __awaiter(this, [lat_1, lon_1, format_1, altitude_1, ...args_1], void 0, function* (lat, lon, format, altitude, options = {}) {
            // verify required parameter 'lat' is not null or undefined
            (0, common_1.assertParamExists)('completeFormatGet', 'lat', lat);
            // verify required parameter 'lon' is not null or undefined
            (0, common_1.assertParamExists)('completeFormatGet', 'lon', lon);
            // verify required parameter 'format' is not null or undefined
            (0, common_1.assertParamExists)('completeFormatGet', 'format', format);
            const localVarPath = `/complete.{format}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (altitude !== undefined) {
                localVarQueryParameter['altitude'] = altitude;
            }
            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }
            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeGet: (lat_1, lon_1, altitude_1, ...args_1) => __awaiter(this, [lat_1, lon_1, altitude_1, ...args_1], void 0, function* (lat, lon, altitude, options = {}) {
            // verify required parameter 'lat' is not null or undefined
            (0, common_1.assertParamExists)('completeGet', 'lat', lat);
            // verify required parameter 'lon' is not null or undefined
            (0, common_1.assertParamExists)('completeGet', 'lon', lon);
            const localVarPath = `/complete`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (altitude !== undefined) {
                localVarQueryParameter['altitude'] = altitude;
            }
            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }
            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {MiniFormatGetFormatEnum} format format code (file extension)
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miniFormatGet: (lat_1, lon_1, format_1, altitude_1, ...args_1) => __awaiter(this, [lat_1, lon_1, format_1, altitude_1, ...args_1], void 0, function* (lat, lon, format, altitude, options = {}) {
            // verify required parameter 'lat' is not null or undefined
            (0, common_1.assertParamExists)('miniFormatGet', 'lat', lat);
            // verify required parameter 'lon' is not null or undefined
            (0, common_1.assertParamExists)('miniFormatGet', 'lon', lon);
            // verify required parameter 'format' is not null or undefined
            (0, common_1.assertParamExists)('miniFormatGet', 'format', format);
            const localVarPath = `/mini.{format}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (altitude !== undefined) {
                localVarQueryParameter['altitude'] = altitude;
            }
            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }
            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miniGet: (lat_1, lon_1, altitude_1, ...args_1) => __awaiter(this, [lat_1, lon_1, altitude_1, ...args_1], void 0, function* (lat, lon, altitude, options = {}) {
            // verify required parameter 'lat' is not null or undefined
            (0, common_1.assertParamExists)('miniGet', 'lat', lat);
            // verify required parameter 'lon' is not null or undefined
            (0, common_1.assertParamExists)('miniGet', 'lon', lon);
            const localVarPath = `/mini`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            if (altitude !== undefined) {
                localVarQueryParameter['altitude'] = altitude;
            }
            if (lat !== undefined) {
                localVarQueryParameter['lat'] = lat;
            }
            if (lon !== undefined) {
                localVarQueryParameter['lon'] = lon;
            }
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Weather forecast for a specified place
         * @param {StatusFormatGetFormatEnum} format format code (file extension)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusFormatGet: (format_1, ...args_1) => __awaiter(this, [format_1, ...args_1], void 0, function* (format, options = {}) {
            // verify required parameter 'format' is not null or undefined
            (0, common_1.assertParamExists)('statusFormatGet', 'format', format);
            const localVarPath = `/status.{format}`
                .replace(`{${"format"}}`, encodeURIComponent(String(format)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Weather forecast for a specified place
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.DataApiAxiosParamCreator = DataApiAxiosParamCreator;
/**
 * DataApi - functional programming interface
 * @export
 */
const DataApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.DataApiAxiosParamCreator)(configuration);
    return {
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {ClassicFormatGetFormatEnum} format format code (file extension)
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classicFormatGet(lat, lon, format, altitude, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.classicFormatGet(lat, lon, format, altitude, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DataApi.classicFormatGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classicGet(lat, lon, altitude, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.classicGet(lat, lon, altitude, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DataApi.classicGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {CompactFormatGetFormatEnum} format format code (file extension)
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compactFormatGet(lat, lon, format, altitude, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.compactFormatGet(lat, lon, format, altitude, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DataApi.compactFormatGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compactGet(lat, lon, altitude, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.compactGet(lat, lon, altitude, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DataApi.compactGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {CompleteFormatGetFormatEnum} format format code (file extension)
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeFormatGet(lat, lon, format, altitude, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.completeFormatGet(lat, lon, format, altitude, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DataApi.completeFormatGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeGet(lat, lon, altitude, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.completeGet(lat, lon, altitude, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DataApi.completeGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {MiniFormatGetFormatEnum} format format code (file extension)
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miniFormatGet(lat, lon, format, altitude, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.miniFormatGet(lat, lon, format, altitude, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DataApi.miniFormatGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miniGet(lat, lon, altitude, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.miniGet(lat, lon, altitude, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DataApi.miniGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Weather forecast for a specified place
         * @param {StatusFormatGetFormatEnum} format format code (file extension)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusFormatGet(format, options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.statusFormatGet(format, options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DataApi.statusFormatGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Weather forecast for a specified place
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.statusGet(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['DataApi.statusGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.DataApiFp = DataApiFp;
/**
 * DataApi - factory interface
 * @export
 */
const DataApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.DataApiFp)(configuration);
    return {
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {ClassicFormatGetFormatEnum} format format code (file extension)
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classicFormatGet(lat, lon, format, altitude, options) {
            return localVarFp.classicFormatGet(lat, lon, format, altitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        classicGet(lat, lon, altitude, options) {
            return localVarFp.classicGet(lat, lon, altitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {CompactFormatGetFormatEnum} format format code (file extension)
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compactFormatGet(lat, lon, format, altitude, options) {
            return localVarFp.compactFormatGet(lat, lon, format, altitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        compactGet(lat, lon, altitude, options) {
            return localVarFp.compactGet(lat, lon, altitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {CompleteFormatGetFormatEnum} format format code (file extension)
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeFormatGet(lat, lon, format, altitude, options) {
            return localVarFp.completeFormatGet(lat, lon, format, altitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        completeGet(lat, lon, altitude, options) {
            return localVarFp.completeGet(lat, lon, altitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {MiniFormatGetFormatEnum} format format code (file extension)
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miniFormatGet(lat, lon, format, altitude, options) {
            return localVarFp.miniFormatGet(lat, lon, format, altitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Weather forecast for a specified place
         * @param {number} lat Latitude
         * @param {number} lon Longitude
         * @param {number} [altitude] Whole meters above sea level
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        miniGet(lat, lon, altitude, options) {
            return localVarFp.miniGet(lat, lon, altitude, options).then((request) => request(axios, basePath));
        },
        /**
         * Weather forecast for a specified place
         * @param {StatusFormatGetFormatEnum} format format code (file extension)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusFormatGet(format, options) {
            return localVarFp.statusFormatGet(format, options).then((request) => request(axios, basePath));
        },
        /**
         * Weather forecast for a specified place
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        statusGet(options) {
            return localVarFp.statusGet(options).then((request) => request(axios, basePath));
        },
    };
};
exports.DataApiFactory = DataApiFactory;
/**
 * DataApi - object-oriented interface
 * @export
 * @class DataApi
 * @extends {BaseAPI}
 */
class DataApi extends base_1.BaseAPI {
    /**
     * Weather forecast for a specified place
     * @param {number} lat Latitude
     * @param {number} lon Longitude
     * @param {ClassicFormatGetFormatEnum} format format code (file extension)
     * @param {number} [altitude] Whole meters above sea level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    classicFormatGet(lat, lon, format, altitude, options) {
        return (0, exports.DataApiFp)(this.configuration).classicFormatGet(lat, lon, format, altitude, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weather forecast for a specified place
     * @param {number} lat Latitude
     * @param {number} lon Longitude
     * @param {number} [altitude] Whole meters above sea level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    classicGet(lat, lon, altitude, options) {
        return (0, exports.DataApiFp)(this.configuration).classicGet(lat, lon, altitude, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weather forecast for a specified place
     * @param {number} lat Latitude
     * @param {number} lon Longitude
     * @param {CompactFormatGetFormatEnum} format format code (file extension)
     * @param {number} [altitude] Whole meters above sea level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    compactFormatGet(lat, lon, format, altitude, options) {
        return (0, exports.DataApiFp)(this.configuration).compactFormatGet(lat, lon, format, altitude, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weather forecast for a specified place
     * @param {number} lat Latitude
     * @param {number} lon Longitude
     * @param {number} [altitude] Whole meters above sea level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    compactGet(lat, lon, altitude, options) {
        return (0, exports.DataApiFp)(this.configuration).compactGet(lat, lon, altitude, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weather forecast for a specified place
     * @param {number} lat Latitude
     * @param {number} lon Longitude
     * @param {CompleteFormatGetFormatEnum} format format code (file extension)
     * @param {number} [altitude] Whole meters above sea level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    completeFormatGet(lat, lon, format, altitude, options) {
        return (0, exports.DataApiFp)(this.configuration).completeFormatGet(lat, lon, format, altitude, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weather forecast for a specified place
     * @param {number} lat Latitude
     * @param {number} lon Longitude
     * @param {number} [altitude] Whole meters above sea level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    completeGet(lat, lon, altitude, options) {
        return (0, exports.DataApiFp)(this.configuration).completeGet(lat, lon, altitude, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weather forecast for a specified place
     * @param {number} lat Latitude
     * @param {number} lon Longitude
     * @param {MiniFormatGetFormatEnum} format format code (file extension)
     * @param {number} [altitude] Whole meters above sea level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    miniFormatGet(lat, lon, format, altitude, options) {
        return (0, exports.DataApiFp)(this.configuration).miniFormatGet(lat, lon, format, altitude, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weather forecast for a specified place
     * @param {number} lat Latitude
     * @param {number} lon Longitude
     * @param {number} [altitude] Whole meters above sea level
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    miniGet(lat, lon, altitude, options) {
        return (0, exports.DataApiFp)(this.configuration).miniGet(lat, lon, altitude, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weather forecast for a specified place
     * @param {StatusFormatGetFormatEnum} format format code (file extension)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    statusFormatGet(format, options) {
        return (0, exports.DataApiFp)(this.configuration).statusFormatGet(format, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weather forecast for a specified place
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DataApi
     */
    statusGet(options) {
        return (0, exports.DataApiFp)(this.configuration).statusGet(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.DataApi = DataApi;
/**
 * @export
 */
exports.ClassicFormatGetFormatEnum = {
    Xml: 'xml'
};
/**
 * @export
 */
exports.CompactFormatGetFormatEnum = {
    Json: 'json'
};
/**
 * @export
 */
exports.CompleteFormatGetFormatEnum = {
    Json: 'json'
};
/**
 * @export
 */
exports.MiniFormatGetFormatEnum = {
    Json: 'json'
};
/**
 * @export
 */
exports.StatusFormatGetFormatEnum = {
    Json: 'json'
};
/**
 * MetadataApi - axios parameter creator
 * @export
 */
const MetadataApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * RSS feed of changes to this product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changelogGet: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/changelog`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Check health status for product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthzGet: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/healthz`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
        /**
         * Schema for XML data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaGet: (...args_1) => __awaiter(this, [...args_1], void 0, function* (options = {}) {
            const localVarPath = `/schema`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, common_1.DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            (0, common_1.setSearchParams)(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);
            return {
                url: (0, common_1.toPathString)(localVarUrlObj),
                options: localVarRequestOptions,
            };
        }),
    };
};
exports.MetadataApiAxiosParamCreator = MetadataApiAxiosParamCreator;
/**
 * MetadataApi - functional programming interface
 * @export
 */
const MetadataApiFp = function (configuration) {
    const localVarAxiosParamCreator = (0, exports.MetadataApiAxiosParamCreator)(configuration);
    return {
        /**
         * RSS feed of changes to this product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changelogGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.changelogGet(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MetadataApi.changelogGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Check health status for product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthzGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.healthzGet(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MetadataApi.healthzGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
        /**
         * Schema for XML data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaGet(options) {
            return __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c;
                const localVarAxiosArgs = yield localVarAxiosParamCreator.schemaGet(options);
                const localVarOperationServerIndex = (_a = configuration === null || configuration === void 0 ? void 0 : configuration.serverIndex) !== null && _a !== void 0 ? _a : 0;
                const localVarOperationServerBasePath = (_c = (_b = base_1.operationServerMap['MetadataApi.schemaGet']) === null || _b === void 0 ? void 0 : _b[localVarOperationServerIndex]) === null || _c === void 0 ? void 0 : _c.url;
                return (axios, basePath) => (0, common_1.createRequestFunction)(localVarAxiosArgs, axios_1.default, base_1.BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
            });
        },
    };
};
exports.MetadataApiFp = MetadataApiFp;
/**
 * MetadataApi - factory interface
 * @export
 */
const MetadataApiFactory = function (configuration, basePath, axios) {
    const localVarFp = (0, exports.MetadataApiFp)(configuration);
    return {
        /**
         * RSS feed of changes to this product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        changelogGet(options) {
            return localVarFp.changelogGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Check health status for product
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        healthzGet(options) {
            return localVarFp.healthzGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Schema for XML data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        schemaGet(options) {
            return localVarFp.schemaGet(options).then((request) => request(axios, basePath));
        },
    };
};
exports.MetadataApiFactory = MetadataApiFactory;
/**
 * MetadataApi - object-oriented interface
 * @export
 * @class MetadataApi
 * @extends {BaseAPI}
 */
class MetadataApi extends base_1.BaseAPI {
    /**
     * RSS feed of changes to this product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    changelogGet(options) {
        return (0, exports.MetadataApiFp)(this.configuration).changelogGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Check health status for product
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    healthzGet(options) {
        return (0, exports.MetadataApiFp)(this.configuration).healthzGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Schema for XML data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof MetadataApi
     */
    schemaGet(options) {
        return (0, exports.MetadataApiFp)(this.configuration).schemaGet(options).then((request) => request(this.axios, this.basePath));
    }
}
exports.MetadataApi = MetadataApi;
